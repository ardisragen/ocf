#!/bin/bash

###
#       @author: msune
#	@organization: i2CAT
#	@project: Ofelia FP7
#	@description: Shell utils file 
###



###I/O functions

##Output utils
txtrst=$(tput sgr0) # Text reset
txtred=$(tput setaf 1) # Red
txtgreen=$(tput setaf 2) # Green
txtylw=$(tput setaf 3) # Yellow

#Log function
function log()
{
	if [ "$USE_LOG" == 1 ]; then
		echo -e "`date`>  $1" >> $LOG
	fi
}

#Simple print
function print()
{
	if [ "$2" == 1 ]; then
		#stderr
		OUT="/dev/stderr"
	else
		OUT="/dev/stdout"
	fi
		log "$1"
		echo -e "$1" > $OUT
}

#Heading print
function printHeader()
{
	print ""
	print ""
	print "${txtgreen}$1 ${txtrst} $2"
}

#debug print
function printDebug()
{
	if [ "$DEBUG" == 1 ]; then
		print "$1"
		log "$1"
	fi
}

#Warning
function warning()
{
	print "${txtylw}WARNING:${txtrst} $1"
}

#Spash

function splash()
{
	echo "$APP_NAME v$APP_VER"
	echo "Website: $APP_WEB"
}

#Summary
function summary()
{	
	print ""
	print ""
	print SUMMARY INSTALL/UPGRADE
	print "******************************************************************************"
	print "Action type: ${txtgreen} $ACTION ${txtrst}"
	if [ "$ACTION" == "install" ]; then
		print "Targeted version: $TARGETED_VERSION" 
	else
		print "Targeted version: $TARGETED_VERSION \t Current(installed): $CURRENT_VERSION"
	fi
	print ""
	print "Flags:"
	
	#Flags
	if [ "$ACTION" == "upgrade" ]; then 
		if [ "$BACKUP" == "0"  ]; then 
			print "\t - ${txtylw}Backup DISABLED!!!!${txtrst}"
		else
			print "\t + ${txtgreen}Backup enabled${txtrst}"
		fi
	fi

	if [ "$USE_LOG" == "1"  ]; then 
		print "\t + Logging enabled"
	else
		print "\t - Logging disabled"
	fi
	if [ "$DEBUG" == "1"  ]; then 
		print "\t + Debug Mode enabled"
	fi
	if [ "$FORCE" == "1"  ]; then 
		print "\t + ${txtred}Force mode...${txtrst}"
	fi	

	print ""
	#Description
	if [ -n "$1"  ]; then 
		print "Description:"
		cat "$1"
	fi
	print "******************************************************************************"

}

#Error function; invoques restore
function error()
{
	local ERROR="${txtred}FATAL ERROR:${txtrst} $1"

	print "$ERROR" 

	if [ -z "$2" ]; then
		loadModule rollback
	fi 
	
	exit 1 
}

##Input utils

#Confirmation with exit
# Usage: $1: message, [$2 throw error on its presence $NO_RETURN], [$3 when $2 present, do not rollback; $NO_RESCUE]
function confirm()
{
	local VALUE
	while :
	do
		echo "$1. Do you confirm (Y/N)?"
		read VALUE

		if [ "$VALUE" == "Y" ] || [ "$VALUE" == "y" ]; then
			#Accepted
			return 0
		elif [ "$VALUE" == "N" ] || [ "$VALUE" == "n" ]; then
			#Rejected
			if [ "$2" == "$DONT_ABORT" ]; then 
				return 1
			else
				error "'$1' clause not confirmed. Aborting..." $3 
			fi
		fi
	done
		
}

function pause
{
	echo $1
	echo -n "Press any key to continue..."
	read 
}

##File utils
#Recover directory path
#$1 contains 
function getDirectory()
{
	echo `dirname $(readlink -f $1)`
}
