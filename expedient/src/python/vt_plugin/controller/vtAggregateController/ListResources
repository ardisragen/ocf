from vt_plugin.models import VTServer, VtPlugin, xmlrpcServerProxy
import xmlrpclib
from vt_manager.communication.utils.XmlUtils import XmlHelper
from vt_plugin.utils.Translator import Translator

class ListResources():
    
    "asks the VT AM for all the resources under it."
    
    @staticmethod 
    def askForAggregateResources(vtPlugin):

        try:
            client = xmlrpclib.Server('https://'+vtPlugin.client.username+':'+vtPlugin.client.password+'@'+vtPlugin.client.url[8:])
            print "CONNECTED TO SERVEEER"
        except Exception as e:
            print "Can't connect to server"
            print e
            return
        try:
            rspec = client.listResources()
            print "GOT RESOURCES FROM AM"
        except Exception as e:
            print "Can't retrieve resources"
            print e
            return
        print rspec
        
        try:
            xmlClass = XmlHelper.parseXmlString(rspec)
            print "RSPEC XML PARSED TO STRING"
        except Exception as e:
            print "Can't parse rspec"
            print e
            return
        
        for server in xmlClass.response.information.resources.server:
            for vm in server.virtual_machine:
                Translator.PopulateNewVMifaces(vm, Translator.VMtoModel(vm, save="save"))
            Translator.ServerClassToModel(server, vtPlugin.id)
        
        return xmlClass
