Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate: admin.pyc
Binary files ./aggregate/forms.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/forms.pyc differ
Binary files ./aggregate/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/__init__.pyc differ
diff -r ./aggregate/models.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/models.py
13,14c13
<     give_permission_to, delete_permission, must_have_permission, has_permission,\
<     get_permittee_from_threadlocals
---
>     give_permission_to, delete_permission, must_have_permission
19d17
< from expedient.common.permissions.exceptions import PermissionDenied
88,90d85
<     def __unicode__(self):
<         return u'Aggregate %s' % self.name
<     
329,338c324
<         user = get_permittee_from_threadlocals("user")
<         can_use = has_permission(
<             user, self.as_leaf_class(), "can_use_aggregate")
<         can_edit = has_permission(
<             user, self.as_leaf_class(), "can_edit_aggregate")
<         if not can_use and not can_edit:
<             raise PermissionDenied(
<                 "can_use_aggregate",
<                 self.as_leaf_class(),
<                 user, allow_redirect=False)
---
>         must_have_permission("user", self.as_leaf_class(), "can_use_aggregate")
Binary files ./aggregate/models.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/models.pyc differ
Binary files ./aggregate/permissions.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/permissions.pyc differ
diff -r ./aggregate/tests/models.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/tests/models.py
6,10c6
< from django.db import models
< from django.db.models.signals import pre_delete
< from expedient.clearinghouse.resources.models import Resource
< from expedient.clearinghouse.aggregate.models import Aggregate
< from expedient.clearinghouse.slice.models import Slice
---
> from .. import models
12,40c8
< class DummyAggregate(Aggregate):
<     def create_resources(self):
<         for i in xrange(1,4):
<             DummyResource.objects.create(
<                 name="DummyResource %s:%s" % (self.id, i),
<                 aggregate=self)
<             
<     def stop_slice(self, slice):
<         super(DummyAggregate, self).stop_slice(slice)
<         DummySliceEvent.objects.get_or_create(
<             slice="%s" % slice,
<             status="stopped",
<             aggregate="%s" % self,
<         )
< 
< class DummyResource(Resource): pass
< 
< class DummySliceEvent(models.Model):
<     slice = models.TextField()
<     status = models.TextField()
<     aggregate = models.TextField()
<     
< def slice_deleted(sender, **kwargs):
<     slice = kwargs["instance"]
<     DummySliceEvent.objects.create(
<         slice="%s" % slice,
<         status="deleted",
<     )
< pre_delete.connect(slice_deleted, Slice)
---
> class DummyAggregate(models.Aggregate): pass
diff -r ./aggregate/tests/tests.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/tests/tests.py
6a7
> from django.conf import settings
10,11c11
< from expedient.clearinghouse.aggregate.tests.models import DummyAggregate,\
<     DummyResource, DummySliceEvent
---
> from expedient.clearinghouse.aggregate.tests.models import DummyAggregate
17,19c17,18
< from expedient.clearinghouse.resources.models import Sliver
< from expedient.clearinghouse.utils import start_test_slice,\
<     add_dummy_agg_to_test_settings
---
> 
> MOD = "expedient.clearinghouse.aggregate"
21a21,22
>     urls = MOD + ".tests.urls"
>     
24,25c25,28
<         add_dummy_agg_to_test_settings(self)
<         
---
>         self.settings_manager.set(
>             INSTALLED_APPS=settings.INSTALLED_APPS + [MOD + ".tests"],
>             DEBUG_PROPAGATE_EXCEPTIONS=True,
>         )
35,37d37
<     def tearDown(self):
<         threadlocals.pop_frame()
<         
110,134d109
<         
<     def test_allowed_delete_with_started_slice(self):
<         '''
<         Tests that we can delete an aggregate that is in a started slice.
<         '''
<         
<         start_test_slice(self)
<         
<         self.client.login(username=self.u1.username, password="password")
<         threadlocals.push_frame(user=self.u1)
< 
<         # delete the aggregate. This should delete all the slivers
<         # and resources, and create a DummySliceEvent to that effect.
<         response = test_get_and_post_form(
<             client=self.client,
<             url=self.agg1.get_delete_url(next="/"),
<             params={},
<         )
<         self.assertRedirects(response, "/")
<         
<         self.assertEqual(DummyAggregate.objects.count(), 1)
<         self.assertEqual(Sliver.objects.count(), 3)
<         self.assertEqual(
<             DummySliceEvent.objects.filter(
<                 slice="%s" % self.slice, status="stopped").count(), 1)
diff -r ./aggregate/tests/urls.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/tests/urls.py
10c10,11
<     url(r'^tests/edit/(?P<agg_id>\d+)/$', 'edit', name='tests_aggregate_edit'),
---
>     url(r'^tests/edit/(?P<agg_id>\d+)/$', 'edit', name='tests_aggregate_edit'), 
>     url(r'^', include("expedient.clearinghouse.urls")),
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate: urls.pyc
diff -r ./aggregate/utils.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/utils.py
14a15
>     agg_plugin_names = [agg[0] for agg in agg_plugins]
16,17c17
<         if len(get_aggregate_classes.l) == len(agg_plugins):
<             return get_aggregate_classes.l
---
>         return get_aggregate_classes.l
19d18
<     agg_plugin_names = [agg[0] for agg in agg_plugins]
Binary files ./aggregate/utils.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/utils.pyc differ
diff -r ./aggregate/views.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/views.py
65c65
<     methods=["GET", "POST"])
---
>     methods=["POST"])
73,75c73,74
<     if request.method == "POST":
<         for s in aggregate.slice_set.all():
<             aggregate.stop_slice(s)
---
>     for s in aggregate.slice_set.all():
>         aggregate.stop_slice(s)
Binary files ./aggregate/views.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//aggregate/views.pyc differ
diff -r ./bootstrap_local_settings.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//bootstrap_local_settings.py
30c30
<     
---
>     
\ No newline at end of file
Binary files ./commands/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//commands/__init__.pyc differ
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//commands/management/commands: create_default_root.pyc
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//commands/management/commands: create_secret_key.pyc
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//commands/management/commands: __init__.pyc
diff -r ./commands/management/commands/test_expedient.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//commands/management/commands/test_expedient.py
7,8d6
< import logging
< from optparse import make_option
15,22d12
<     option_list = NoArgsCommand.option_list + (
<         make_option(
<             '--debug', action='store_true', dest='debug',
<             help='Specifies request to use full logging. Otherwise'
<                 'the tests are run silently.',
<         ),
<     )
< 
28,31d17
<         
<         debug = options.get("debug")
<         if not debug:
<             logging.disable(logging.WARN)
Binary files ./commands/management/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//commands/management/__init__.pyc differ
Binary files ./commands/models.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//commands/models.pyc differ
Binary files ./commands/utils.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//commands/utils.pyc differ
Binary files ./defaultsettings/admins.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/admins.pyc differ
Binary files ./defaultsettings/database.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/database.pyc differ
diff -r ./defaultsettings/django.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/django.py
7d6
< import sys
9d7
< from utils import append_to_local_setting
13,14d10
<     #sys.path.append("/home/user/ofelia-git/expedient/src/python/")
<     sys.path.append(location)
36c32,33
< 
---
>     #location = " /home/user/ofelia-git/expedient/src/python/expedient/clearinghouse"     
>    
106,107d102
< append_to_local_setting(
<     "TEMPLATE_LOADERS", TEMPLATE_LOADERS, globals())
110c105
< #    'expedient.common.middleware.exceptionprinter.ExceptionPrinter',
---
>     'expedient.common.middleware.exceptionprinter.ExceptionPrinter',
123,125d117
< append_to_local_setting(
<     "MIDDLEWARE_CLASSES", MIDDLEWARE_CLASSES, globals(), at_start=True,
< )
131,134c123
< append_to_local_setting(
<     "AUTHENTICATION_BACKENDS", AUTHENTICATION_BACKENDS, globals(),
< )
<     
---
> 
136a126,130
> try:
>     from localsettings import *
> except ImportError:
>     pass
> 
142,144d135
< append_to_local_setting(
<     "TEMPLATE_DIRS", TEMPLATE_DIRS, globals(),
< )
147c138
<     'expedient.clearinghouse.firstapp', # Must remain first!
---
>     'expedient.clearinghouse.firstapp',
153a145
>     'django_evolution',
156d147
<     'expedient.common.timer',
166a158
>     'expedient.clearinghouse.messagecenter',
182,184d173
< append_to_local_setting(
<     "INSTALLED_APPS", INSTALLED_APPS, globals(), at_start=True,
< )
204,205d192
< append_to_local_setting(
<     "TEMPLATE_CONTEXT_PROCESSORS", TEMPLATE_CONTEXT_PROCESSORS, globals())
Binary files ./defaultsettings/django.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/django.pyc differ
Binary files ./defaultsettings/email.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/email.pyc differ
diff -r ./defaultsettings/expedient.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/expedient.py
7d6
< from utils import append_to_local_setting
17d15
< append_to_local_setting("BASIC_AUTH_URLS", BASIC_AUTH_URLS, globals())
31,35d28
< append_to_local_setting(
<     "SITE_LOCKDOWN_EXCEPTIONS",
<     SITE_LOCKDOWN_EXCEPTIONS,
<     globals(),
< )
58d50
< append_to_local_setting("UI_PLUGINS", UI_PLUGINS, globals())
80,103d71
< append_to_local_setting("AGGREGATE_PLUGINS", AGGREGATE_PLUGINS, globals())
< 
< SLICE_EXPIRATION_CHECK_INTERVAL = 3600
< '''How often should we check for expired slices?
< 
< This indicates how often to check for expired slices and stop
< them. The given time is in seconds.
< 
< The accuracy will depend on how often the expedient cron job runs.
< 
< '''
< 
< SLICE_EXPIRATION_NOTIFICATION_TIME = 3600*24
< '''How much earlier should we send an email about slices almost expiring?
< 
< This indicates when to send emails to slice owners that their slices
< are about to expire. Time is in seconds.
< 
< The accuracy will depend on how often the expedient cron job runs.
< 
< '''
< 
< MAX_SLICE_LIFE = 30
< '''Maximum life of a slice without renewing in days'''
Binary files ./defaultsettings/expedient.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/expedient.pyc differ
diff -r ./defaultsettings/gcf.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/gcf.py
77,79d76
< 
< GENI_AGGREGATE_UPDATE_PERIOD = 15*60
< '''Every how many seconds should a GENIAggregate get updated?'''
Binary files ./defaultsettings/gcf.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/gcf.pyc differ
Binary files ./defaultsettings/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/__init__.pyc differ
Only in ./defaultsettings: localsettings.py
Only in ./defaultsettings: localsettings.pyc
Binary files ./defaultsettings/logging.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/logging.pyc differ
Binary files ./defaultsettings/messaging.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/messaging.pyc differ
diff -r ./defaultsettings/openflow.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/openflow.py
34,38d33
< 
< OPENFLOW_TOPOLOGY_UPDATE_PERIOD = 5*60
< '''Every how many seconds should an OpenFlow Aggregate update its topology?
< 
< '''
Binary files ./defaultsettings/openflow.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/openflow.pyc differ
Binary files ./defaultsettings/openflowtests.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/openflowtests.pyc differ
Binary files ./defaultsettings/required.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/required.pyc differ
Binary files ./defaultsettings/site.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/site.pyc differ
Binary files ./defaultsettings/tests.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/tests.pyc differ
Only in ./defaultsettings: utils.py
Only in ./defaultsettings: utils.pyc
Binary files ./defaultsettings/xmlrpc.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//defaultsettings/xmlrpc.pyc differ
Only in .: diffs
Binary files ./firstapp/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//firstapp/__init__.pyc differ
Binary files ./firstapp/models.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//firstapp/models.pyc differ
diff -r ./gcf-x509.key/ch.key /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//gcf-x509.key/ch.key
2,14c2,14
< MIICXQIBAAKBgQDGTikl9q35A9Yp1GZenAJuCHHFaKzoSuP+L8xpGwt24x5auG74
< M14BBbZWv5sotq/JBsV4bdp7jFQ40ZaG0tFO/heoWXfTsqHTU/6Td39oJ8KJrEbE
< S+OLck43i3vc2SUIs2yUdRddIuQb1vsxTozRWHlx5zVPfaECih2Zqahr+QIDAQAB
< AoGADeK5NORSCEbBf0pVJLjN3sCOnuEWgmmED29vY8i2A8whev7BHnYSVgX9X5Op
< HK+2HWBxAV7H1rDb0OK0JJqsdzj7vCCk+h9LnTnRt4bRcjDSV383M5q6pYbrYr0i
< 4CBUEDRnQvi2k5y+xaRaK/sIxfo4vLsJUuDEIeT54Npv1WUCQQDhnvZ0/VJh5KB7
< XnID9JkfDkuehzHVEQROhqrMlV+q7lzvgq8nkXI2XGCMKzJ8dsB9cwMTp6VqT5yD
< BqMmRbw3AkEA4QGkbVCRQT7QsfgkGWTuCS0q8aYzIWaRikMwjw7Oq//cGvgLWZkW
< +gJFWscNFxtPHM/u3e0sjYsn0hsoCIHhTwJBAJhGeYCsGJYJgGbDb6BLzaywMUll
< ZbSwL3/wVAaQKmlrRz4/rYe/Gp6l6mOwI/rtCy2gGkuBspr18GRebm6+UjECQGql
< 06C4mlCZjGN+YOXkb+rLjNpC02NWcU9eb2qvMwhVWqcxwHd0V26imurfA/ZazFG0
< wNxRqVdhiLtOgdgeb4MCQQDWWBsr8J7Ko4NY7+KAzTnM/L14Ysx3BiKgcflqBqyI
< +6V9qXKBGOGICa3i0d0Pf2KPecn2ijQXlWAWrgORtn52
---
> MIICXQIBAAKBgQDAYJgmUVFCg3hAF4kKtydnYcqYB+AfE/Dxllqn/UCeL2QJJOoJ
> j+rI9W6BcWhGSxWO+jUU9jKzo603ph34VYjHBQlAuZHi+K4cKm9jZ3J/Wj/UBiYI
> gXRb6hXrsVz6SweUVnuCgc2JOCoHwwddIalNT40+YtxNV2XWP7Q5BGnCvQIDAQAB
> AoGBAJEAve4z4OIXom38z2jqQKMmDMSnOwFx0GzofZCdzTTuV6Kk1ls6xSeQByk+
> R/Cj664HXjdckz7gIlINvg1Ou3amFGRMlRSxbJ0dk6O3hVZPmXppOr3r67EP+3dX
> HyaXVRuCyaTVxypstbGhyI8OYM3QikMQI3J8fLro3uGWM+lBAkEA/VECeMvG4n9b
> Zi2Tf36rSNmJFFNkhPjMwTvOjAgH+PgIGee1L6Q89/ihtg1srsAV052CoUV4UDQR
> BrhDY1DUpQJBAMJqUZazgjf8Xe/2JHdlTZHPYZ5+iOD/Sma3em0IbL85aszkBwj8
> YttlDhO5Cnr5vLoX/gl3ZHonhdK/OtRSojkCQG+2mCZ5h54/mCk5lEC3tgYMmV1z
> YXMa3gGhxHcQ26M6jygNfWQjRBf/eCF3TiTK5VVLs1436tVEAPY7sMxNy1kCQDiU
> epQyP+aNQsVwTCKXT+Dsist2pd1dTsjgAvgyaHuqeSOSBV4fHaIeId+pjZxGjB9Y
> li0pGwvV7sNrtfJO7jkCQQCGi7Cmpw+bBje26AWs6Gb8RSuf/cSH1ozc79038Mq6
> z8cNnvryW5HPX/byyYa7ywrkqbdqyaLfzKJfA7RQw4J0
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//gcf-x509.key: user_x509_expedient.key
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//gcf-x509.key: user_x509_prova.key
diff -r ./gcf-x509-trusted.crt/ch.crt /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//gcf-x509-trusted.crt/ch.crt
3,8c3,8
< Ly9pMkNBVC5hdXRob3JpdHkuc2EwHhcNMTEwMzAxMTAwODIwWhcNMTYwMjI4MTAw
< ODIwWjAoMSYwJAYDVQQDEx1leHBlZGllbnQvL2kyQ0FULmF1dGhvcml0eS5zYTCB
< nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAxk4pJfat+QPWKdRmXpwCbghxxWis
< 6Erj/i/MaRsLduMeWrhu+DNeAQW2Vr+bKLavyQbFeG3ae4xUONGWhtLRTv4XqFl3
< 07Kh01P+k3d/aCfCiaxGxEvji3JON4t73NklCLNslHUXXSLkG9b7MU6M0Vh5cec1
< T32hAoodmamoa/kCAwEAAaM8MDowOAYDVR0RBDEwL4YtdXJuOnB1YmxpY2lkOklE
---
> Ly9pMkNBVC5hdXRob3JpdHkuc2EwHhcNMTAxMjAyMTE1NTA0WhcNMTUxMjAxMTE1
> NTA0WjAoMSYwJAYDVQQDEx1leHBlZGllbnQvL2kyQ0FULmF1dGhvcml0eS5zYTCB
> nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAwGCYJlFRQoN4QBeJCrcnZ2HKmAfg
> HxPw8ZZap/1Ani9kCSTqCY/qyPVugXFoRksVjvo1FPYys6OtN6Yd+FWIxwUJQLmR
> 4viuHCpvY2dyf1o/1AYmCIF0W+oV67Fc+ksHlFZ7goHNiTgqB8MHXSGpTU+NPmLc
> TVdl1j+0OQRpwr0CAwEAAaM8MDowOAYDVR0RBDEwL4YtdXJuOnB1YmxpY2lkOklE
10,12c10,12
< ACzqM6Z/TEECkpLi74eUKh40xOZSMXb7CWDSwh9J7mP7R7tG4oI4He9hYrfagAdE
< QDxD7xRG7BsrILuyHmwtwPdSnz7dzYfr8uc65XBImmixuvMiZLSYTn08pTrky/NQ
< g+RFexnkdzhsJxR7MOuJ8EyOZq2n+O7tb8PdDqslAilK
---
> AK3at7Y20+SrfGms8NwKsK7eo9+qSzmrOELlSSyG110iDSBKDLIQJR8nFr5m+NxH
> VERVfGFfIUaG6v1swSTr6w+KwTGgZOtpnJhjkAXxr6ePqb7M5wCicHhq5F3DkSmf
> JY0Z6xNzf9D/SI0bc06slLQ4ht2C7lug+dXCG+jy2y4m
diff -r ./gcf-x509-user.crt/user_x509_expedient.crt /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//gcf-x509-user.crt/user_x509_expedient.crt
3,8c3,8
< Ly9pMkNBVC5hdXRob3JpdHkuc2EwHhcNMTEwMzAxMTIyNzQ4WhcNMTYwMjI4MTIy
< NzQ4WjAqMSgwJgYDVQQDEx9leHBlZGllbnQvL2kyQ0FULnVzZXIuZXhwZWRpZW50
< MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+04cBemj6SqXrjfWG7hegbthu
< JpzsLN5/pyT3htsQTiUCQKnqmpj5zA1Dmu37rMGp/z3r6u5sqnwyLO8hS3SPmCRu
< kdWaa9yWGcO53WyuZ10tgQd1+tq6Yrp1SrTk/CvpzMGvTbzwqwpOlUYzlHD/hSb6
< NXrFSWyIDFTUQO+OJwIDAQABoz4wPDA6BgNVHREEMzAxhi91cm46cHVibGljaWQ6
---
> Ly9pMkNBVC5hdXRob3JpdHkuc2EwHhcNMTAxMjAyMTczNzM1WhcNMTUxMjAxMTcz
> NzM1WjAqMSgwJgYDVQQDEx9leHBlZGllbnQvL2kyQ0FULnVzZXIuZXhwZWRpZW50
> MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDfk/hwEU9bNXvAg4RUw7nIH1mT
> hItkWrYmdEXf5ZbiuH32TFa2P1dFdHO2emSAxvHsdlLueGTxx0je0Fjdfs+aZ8Zk
> w50rUCPsfOEQ5zB50Ji6J3Km16SFOX7Zc6owZSSljTXpBnGIwtA7EixNkTZAlMUy
> INi4QJ4EANRBVss6ZwIDAQABoz4wPDA6BgNVHREEMzAxhi91cm46cHVibGljaWQ6
10,12c10,12
< AAOBgQAYHxj7ObdUxU/j7tBRICEUw2JZsZRzxc9CUONkHhbwN2NA9T0FZo2C0OF7
< kSr2vIkHyvS8AYycJZRSKpTiJ0PscFxJZBPyV4lt2m25DTvHWoqihKVP/g0wsz2S
< rhE3hrUv5omUqSq14uWzi8gu/V2Tu4Mj7cHI/lEYrkC5iMqMwQ==
---
> AAOBgQCKLCbEyUDGGa4OrHnq4m/tdUtY6fBjg4GZNSYnNqBNcAdMCo9WoeTRADmi
> gLZ80pRK2/HXWsN665V2All55y51H2l5PKAuTfdq4VIPPXqkY6k/kchobjAUgv1M
> 7ghs5s5Z1Zr8yN9MtIQ6o3TM9TLkLnQi2vhm1Pv3gvAzYWKBxg==
16,21c16,21
< Ly9pMkNBVC5hdXRob3JpdHkuc2EwHhcNMTEwMzAxMTAwODIwWhcNMTYwMjI4MTAw
< ODIwWjAoMSYwJAYDVQQDEx1leHBlZGllbnQvL2kyQ0FULmF1dGhvcml0eS5zYTCB
< nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAxk4pJfat+QPWKdRmXpwCbghxxWis
< 6Erj/i/MaRsLduMeWrhu+DNeAQW2Vr+bKLavyQbFeG3ae4xUONGWhtLRTv4XqFl3
< 07Kh01P+k3d/aCfCiaxGxEvji3JON4t73NklCLNslHUXXSLkG9b7MU6M0Vh5cec1
< T32hAoodmamoa/kCAwEAAaM8MDowOAYDVR0RBDEwL4YtdXJuOnB1YmxpY2lkOklE
---
> Ly9pMkNBVC5hdXRob3JpdHkuc2EwHhcNMTAxMjAyMTE1NTA0WhcNMTUxMjAxMTE1
> NTA0WjAoMSYwJAYDVQQDEx1leHBlZGllbnQvL2kyQ0FULmF1dGhvcml0eS5zYTCB
> nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAwGCYJlFRQoN4QBeJCrcnZ2HKmAfg
> HxPw8ZZap/1Ani9kCSTqCY/qyPVugXFoRksVjvo1FPYys6OtN6Yd+FWIxwUJQLmR
> 4viuHCpvY2dyf1o/1AYmCIF0W+oV67Fc+ksHlFZ7goHNiTgqB8MHXSGpTU+NPmLc
> TVdl1j+0OQRpwr0CAwEAAaM8MDowOAYDVR0RBDEwL4YtdXJuOnB1YmxpY2lkOklE
23,25c23,25
< ACzqM6Z/TEECkpLi74eUKh40xOZSMXb7CWDSwh9J7mP7R7tG4oI4He9hYrfagAdE
< QDxD7xRG7BsrILuyHmwtwPdSnz7dzYfr8uc65XBImmixuvMiZLSYTn08pTrky/NQ
< g+RFexnkdzhsJxR7MOuJ8EyOZq2n+O7tb8PdDqslAilK
---
> AK3at7Y20+SrfGms8NwKsK7eo9+qSzmrOELlSSyG110iDSBKDLIQJR8nFr5m+NxH
> VERVfGFfIUaG6v1swSTr6w+KwTGgZOtpnJhjkAXxr6ePqb7M5wCicHhq5F3DkSmf
> JY0Z6xNzf9D/SI0bc06slLQ4ht2C7lug+dXCG+jy2y4m
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//gcf-x509-user.crt: user_x509_prova.crt
Binary files ./__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//__init__.pyc differ
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse/: localsettings.py
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse/: localsettings.pyc
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse/: messagecenter
Binary files ./permissionmgmt/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//permissionmgmt/__init__.pyc differ
Binary files ./permissionmgmt/models.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//permissionmgmt/models.pyc differ
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//permissionmgmt: urls.pyc
Binary files ./permissionmgmt/utils.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//permissionmgmt/utils.pyc differ
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//permissionmgmt: views.pyc
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//project: admin.pyc
Binary files ./project/forms.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//project/forms.pyc differ
Binary files ./project/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//project/__init__.pyc differ
diff -r ./project/models.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//project/models.py
96c96,98
<         return Aggregate.objects.filter(pk__in=agg_ids)
---
> 	#XXX: MARC did this
>         #return Aggregate.objects.filter(pk__in=agg_ids)
>         return Aggregate.objects
130,187d131
<     @classmethod
<     @models.permalink
<     def get_create_url(cls):
<         "Returns the URL to create projects"
<         return ("project_create",)
<     
<     @models.permalink
<     def get_update_url(self):
<         "Returns the URL to update project info"
<         return ("project_update", (), {"proj_id": self.id})
< 
<     @models.permalink
<     def get_detail_url(self):
<         "Returns the URL for the project detail page"
<         return ("project_detail", (), {"proj_id": self.id})
<     
<     @models.permalink
<     def get_delete_url(self):
<         "Returns the URL to delete a project"
<         return ("project_delete", (), {"proj_id": self.id})
<     
<     @models.permalink
<     def get_agg_add_url(self):
<         "Returns the URL to add an aggregate to a project"
<         return ("project_add_agg", (), {"proj_id": self.id})
< 
<     @models.permalink
<     def get_agg_update_url(self, aggregate):
<         "Returns URL to update an aggregate's info related to the project"
<         return ("project_update_agg", (), {
<             "proj_id": self.id,
<             "agg_id": aggregate.id})
<     
<     @models.permalink
<     def get_agg_remove_url(self, aggregate):
<         "Returns URL to remove aggregate from project"
<         return ("project_remove_agg", (), {
<             "proj_id": self.id,
<             "agg_id": aggregate.id})
<     
<     @models.permalink
<     def get_member_add_url(self):
<         return ("project_member_add", (), {
<             "proj_id": self.id})
<     
<     @models.permalink
<     def get_member_update_url(self, user):
<         return ("project_member_update", (), {
<             "proj_id": self.id,
<             "user_id": user.id})
< 
<     @models.permalink
<     def get_member_remove_url(self, user):
<         return ("project_member_remove", (), {
<             "proj_id": self.id,
<             "user_id": user.id})
<     
<     
\ No newline at end of file
Binary files ./project/models.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//project/models.pyc differ
Binary files ./project/permissions.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//project/permissions.pyc differ
diff -r ./project/tests.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//project/tests.py
17,18c17
< from expedient.clearinghouse.aggregate.tests.models import DummyAggregate,\
<     DummyResource, DummySliceEvent
---
> from expedient.clearinghouse.aggregate.tests.models import DummyAggregate
20,25d18
< from expedient.common.tests.client import test_get_and_post_form
< from expedient.clearinghouse.slice.models import Slice
< from expedient.clearinghouse.resources.models import Sliver
< from expedient.clearinghouse.roles.models import ProjectRole
< from expedient.clearinghouse.utils import add_dummy_agg_to_test_settings,\
<     start_test_slice
31c24,58
<     add_dummy_agg_to_test_settings(self)
---
>     self.settings_manager.set(
>         INSTALLED_APPS=settings.INSTALLED_APPS + \
>         ["expedient.clearinghouse.aggregate.tests"],
>         AGGREGATE_PLUGINS=settings.AGGREGATE_PLUGINS + \
>             (("expedient.clearinghouse.aggregate.tests.models.DummyAggregate",
>               "dummy_agg",
>               "expedient.clearinghouse.aggregate.tests.urls"),
>             ),
>         DEBUG_PROPAGATE_EXCEPTIONS=True,
>     )
>     try:
>         del get_aggregate_classes.l
>     except AttributeError:
>         pass
>     
>     """Create users and aggregates"""
>     self.su = User.objects.create_superuser(
>         "superuser", "su@su.com", "password")
>     self.u1 = User.objects.create_user(
>         "user1", "u@u.com", "password")
>     self.u2 = User.objects.create_user(
>         "user2", "u@u.com", "password")
>     
>     self.client.login(username="superuser", password="password")
>     threadlocals.push_frame(user=self.su)
>     
>     self.agg1 = DummyAggregate.objects.create(
>         name="Agg1",
>     )
>     self.agg2 = DummyAggregate.objects.create(
>         name="Agg2",
>     )
>     
>     self.client.logout()
>     threadlocals.pop_frame()
37,55d63
<         self.su = User.objects.create_superuser(
<             "superuser", "su@su.com", "password")
<         
<         self.client.login(username="superuser", password="password")
<         threadlocals.push_frame(user=self.su)
<         
<         self.agg1 = DummyAggregate.objects.create(
<             name="Agg1",
<         )
<         self.agg1.create_resources()
<         
<         self.agg2 = DummyAggregate.objects.create(
<             name="Agg2",
<         )
<         self.agg2.create_resources()
<         
<         self.client.logout()
<         threadlocals.pop_frame()
<             
91,92c99,100
<         
<     def test_full(self):
---
> 
>     def test_list(self):
94c102
<         Test that a project with a started slice can be deleted.
---
>         Create a few projects and check the get.
95a104,133
>         pass
> #        l = []
> #        members = User.objects.all()[0:2]
> #        self.client.login(username="superuser", password="password")
> #        threadlocals.push_frame(user=self.su)
> #        for p in xrange(3):
> #            
> #        threadlocals.pop_frame()
> #        self.client.logout()
> #        
> #        # check that the members see 3 projects    
> #        for i, m in enumerate(members):
> #            self.client.login(username=m.username, password="password")
> #            response = self.client.get(reverse("project_list"))
> #            self.assertContains(response, "project0", 1)
> #            self.assertContains(response, "description0", 1)
> #            self.assertContains(response, "project1", 1)
> #            self.assertContains(response, "description1", 1)
> #            d = pq(response.content)
> #            self.assertEqual(len(d('tr')), 4) # including headers
> #        
> #        # check that a nonmember doesn't see any projects
> #        self.client.login(username=m.username, password="password")
> #        response = self.client.get(reverse("project_list"))
> #        self.assertNotContains(response, "project0", 1)
> #        self.assertNotContains(response, "description0", 1)
> #        self.assertNotContains(response, "project1", 1)
> #        self.assertNotContains(response, "description1", 1)
> #        d = pq(response.content)
> #        self.assertEqual(len(d('tr')), 1)
97,124c135
<         start_test_slice(self)
<         
<         slice_name = "%s" % self.slice
<         
<         self.client.login(
<             username=self.u2.username, password="password")
<         threadlocals.push_frame(user=self.u2)
< 
<         # delete the project. This should delete all the slivers
<         # and resources, and delete the slice. It should also stop
<         # the slice (which creates a DummySliceEvent)
<         response = test_get_and_post_form(
<             client=self.client,
<             url=self.project.get_delete_url(),
<             params={},
<         )
<         self.assertRedirects(response, "/")
< 
<         self.assertEqual(
<             DummySliceEvent.objects.filter(
<                 slice=slice_name, status="stopped").count(), 2)
<         self.assertEqual(Sliver.objects.count(), 0)
<         self.assertEqual(Project.objects.count(), 0)
<         
<         self.client.logout()
<         threadlocals.pop_frame()
<         
<         
---
>     
\ No newline at end of file
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//project: urls.pyc
Binary files ./project/views.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//project/views.pyc differ
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//resources: admin.pyc
Binary files ./resources/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//resources/__init__.pyc differ
Binary files ./resources/models.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//resources/models.pyc differ
Binary files ./roles/forms.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//roles/forms.pyc differ
Binary files ./roles/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//roles/__init__.pyc differ
Binary files ./roles/models.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//roles/models.pyc differ
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//roles: urls.pyc
Binary files ./roles/utils.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//roles/utils.pyc differ
Binary files ./roles/views.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//roles/views.pyc differ
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse/: secret_key.py
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse/: secret_key.pyc
Binary files ./settings.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//settings.pyc differ
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//slice: admin.pyc
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//slice: forms.pyc
Binary files ./slice/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//slice/__init__.pyc differ
diff -r ./slice/models.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//slice/models.py
4d3
< from datetime import datetime, timedelta
13,20d11
< from expedient.common.messaging.models import DatedMessage
< import traceback
< from django.core.mail import send_mail
< from django.conf import settings
< from expedient.common.timer.models import Job
< from expedient.common.timer.exceptions import JobAlreadyScheduled
< from expedient.common.utils.modelfields import LimitedDateTimeField
< from expedient.common.middleware import threadlocals
24,26d14
< def _get_slice_max_date():
<     return datetime.now() + timedelta(days=settings.MAX_SLICE_LIFE)
< 
42,44d29
<     @ivar expiration_date: Date and time of when the slice is going to
<         expire in local time.
<     @type expiration_date: L{datetime.datetime} instance
50c35
<     
---
> 
57,67d41
<     expiration_date = LimitedDateTimeField(
<         default=datetime.now,
<         help_text="Enter a date and time. The date should be in the"
<             " following format: 'YYYY-MM-DD'. And for the time: 'HH:MM:SS'."
<             " The expiration date cannot be later than %s days from"
<             " now." % settings.MAX_SLICE_LIFE,
<         max_date=_get_slice_max_date,
<    )
<     
<     def __unicode__(self):
<         return u"Slice '%s' in project '%s'" % (self.name, self.project.name)
73,75d46
<         # check the expiration date
<         if self.expiration_date <= datetime.now():
<             raise Exception("Slice expired. Update slice expiration time.")
77,78c48
<         aggs = enumerate(self.aggregates.all())
<         for i, agg in aggs:
---
>         for agg in self.aggregates.all():
80,98c50
<             try:
<                 agg.as_leaf_class().start_slice(self)
<             except Exception, e:
<                 logger.error("Error starting slice on agg %s" % agg.name)
<                 # try to stop slice on all previously started aggregates
<                 for j in xrange(i):
<                     try:
<                         aggs[j][1].as_leaf_class().stop_slice(self)
<                     except Exception, e2:
<                         # error stopping slice
<                         logger.error(traceback.format_exc())
<                         DatedMessage.objects.post_message_to_user(
<                             msg_text="Error stopping slice %s on "
<                                 "aggregate %s" % (self, aggs[j][1].name),
<                             user=user, msg_type=DatedMessage.TYPE_ERROR)
<                 # raise the original exception raised starting the slice.
<                 raise e
<         
<         # all is well
---
>             agg.as_leaf_class().start_slice(self)
127c79,81
<         return Aggregate.objects.filter(pk__in=agg_ids)
---
> 	#XXX: MARC did this
>         #return Aggregate.objects.filter(pk__in=agg_ids)
>         return Aggregate.objects
130,185d83
<     @classmethod
<     @models.permalink
<     def get_create_url(cls, proj_id):
<         "Returns the URL to create slices"
<         return ("slice_create", (), {"proj_id": proj_id})
<     
<     @models.permalink
<     def get_update_url(self):
<         "Returns the URL to update slice info"
<         return ("slice_update", (), {"slice_id": self.id})
< 
<     @models.permalink
<     def get_detail_url(self):
<         "Returns the URL for the slice detail page"
<         return ("slice_detail", (), {"slice_id": self.id})
<     
<     @models.permalink
<     def get_delete_url(self):
<         "Returns the URL to delete a slice"
<         return ("slice_delete", (), {"slice_id": self.id})
<     
<     @models.permalink
<     def get_start_url(self):
<         "Returns the URL to start the slice"
<         return ("slice_start", (), {"slice_id": self.id})
<     
<     @models.permalink
<     def get_stop_url(self):
<         "Returns the URL to stop the slice"
<         return ("slice_stop", (), {"slice_id": self.id})    
<     
<     @models.permalink
<     def get_agg_add_url(self):
<         "Returns the URL to add an aggregate to a slice"
<         return ("slice_add_agg", (), {"slice_id": self.id})
< 
<     @models.permalink
<     def get_agg_update_url(self, aggregate):
<         "Returns URL to update an aggregate's info related to the slice"
<         return ("slice_update_agg", (), {
<             "slice_id": self.id,
<             "agg_id": aggregate.id})
<     
<     @models.permalink
<     def get_agg_remove_url(self, aggregate):
<         "Returns URL to remove aggregate from slice"
<         return ("slice_remove_agg", (), {
<             "slice_id": self.id,
<             "agg_id": aggregate.id})
<     
<     @models.permalink
<     def get_rsc_management_url(self):
<         "Returns the URL at which to select a UI plugin."
<         return ("slice_manage_resources", (), {"slice_id": self.id})
<     
<     
187d84
<     """Before deleting a slice, make sure it is stopped"""
193,259d89
< 
< # Deal with expired slices ##################################################
< 
< def stop_expired_slices():
<     """Find expired slices and stop them, sending an email to the owner."""
<     
<     expired_slices = Slice.objects.filter(
<         expiration_date__lte=datetime.now(), started=True)
<     
<     for slice in expired_slices:
<         threadlocals.push_frame(user=slice.owner)
<         try:
<             slice.stop(slice.owner)
<         except:
<             logger.error(
<                 "Error stopping expired slice"
<                 " %s: %s" % (slice, traceback.format_exc()))
<         threadlocals.pop_frame()
<         try:
<             send_mail(
<                 "Your slice %s expired." % slice,
<                 "Your slice %s has been stopped because it expired on %s."
<                 "Before you restart your slice, you will need to update the "
<                 "slice's expiration date." % (slice, slice.expiration_date),
<                 from_email=settings.DEFAULT_FROM_EMAIL,
<                 recipient_list=[slice.owner.email],
<             )
<         except:
<             logger.error(
<                 "Error sending expired slice "
<                 "email to user: %s" % traceback.format_exc())
<     
< def notify_slice_expirations():
<     """Notify owners that their slices will expire soon."""
< 
<     expiration_time = datetime.now() + timedelta(
<         seconds=settings.SLICE_EXPIRATION_NOTIFICATION_TIME)
<     
<     almost_expired_slices = Slice.objects.filter(
<         expiration_date__lte=expiration_time, started=True)
< 
<     for slice in almost_expired_slices:
<         try:
<             send_mail(
<                 "Your slice %s is almost expired." % slice,
<                 "Your slice %s is almost expired. If you don't do anything, "
<                 "it will expired on %s. "
<                 "To renew your slice, you will need to update the "
<                 "slice's expiration date." % (slice, slice.expiration_date),
<                 from_email=settings.DEFAULT_FROM_EMAIL,
<                 recipient_list=[slice.owner.email],
<             )
<         except:
<             logger.error(
<                 "Error sending almost expired slice "
<                 "email to user: %s" % traceback.format_exc())
<     
< # schedule jobs
< try:
<     Job.objects.schedule_post_syncdb(settings.SLICE_EXPIRATION_CHECK_INTERVAL, stop_expired_slices)
< except JobAlreadyScheduled:
<     pass
< 
< try:
<     Job.objects.schedule_post_syncdb(settings.SLICE_EXPIRATION_NOTIFICATION_TIME, notify_slice_expirations)
< except JobAlreadyScheduled:
<     pass
Binary files ./slice/models.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//slice/models.pyc differ
Only in ./slice: tests.py
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//slice: urls.pyc
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//slice: views.pyc
diff -r ./urls.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//urls.py
18a19
>     (r'^messagecenter/',include('expedient.clearinghouse.messagecenter.urls')),
62d62
<     get_static_url("root_media"),
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse/: urls.pyc
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//users: admin.pyc
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//users: forms.pyc
Binary files ./users/__init__.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//users/__init__.pyc differ
Binary files ./users/models.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//users/models.pyc differ
diff -r ./users/permissions.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//users/permissions.py
22c22
<             " user management page.",
---
>             "user management page.",
Binary files ./users/permissions.pyc and /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//users/permissions.pyc differ
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//users: urls.pyc
diff -r ./users/views.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//users/views.py
61,64d60
<             'breadcrumbs': (
<                 ("Home", reverse("home")),
<                 ("Manage users", request.path),
<             )
119c115
<             'curr_user': user,
---
>             'user': user,
134c130
<     print user.id
---
> 
139c135
<             'curr_user': user,
---
>             'user': user,
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//users: views.pyc
diff -r ./utils.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//utils.py
6,7d5
< from datetime import datetime, timedelta
< from django.conf import settings
10,17d7
< from django.contrib.auth.models import User
< from expedient.common.permissions.shortcuts import give_permission_to
< from expedient.clearinghouse.aggregate.models import Aggregate
< from expedient.clearinghouse.project.models import Project
< from expedient.common.tests.client import test_get_and_post_form
< from expedient.clearinghouse.slice.models import Slice
< from expedient.clearinghouse.resources.models import Sliver
< from expedient.clearinghouse.roles.models import ProjectRole
40,263c30
< def add_dummy_agg_to_test_settings(test):
<     """Adds the dummy aggregate test models to the installed apps of the test.
<     
<     C{test} must be a child of L{expedient.common.tests.manager.SettingsTestCase}.
<     
<     """
<     from django.conf import settings
<     test.settings_manager.set(
<         INSTALLED_APPS=settings.INSTALLED_APPS + \
<         ["expedient.clearinghouse.aggregate.tests"],
<         AGGREGATE_PLUGINS=settings.AGGREGATE_PLUGINS + \
<             [("expedient.clearinghouse.aggregate.tests.models.DummyAggregate",
<               "dummy_agg",
<               "expedient.clearinghouse.aggregate.tests.urls"),
<             ],
<         DEBUG_PROPAGATE_EXCEPTIONS=True,
<     )    
<     
< 
< def create_test_users(test):
<     # create users
<     test.u1 = User.objects.create_user(
<         "user1", "u@u.com", "password")
<     test.u2 = User.objects.create_user(
<         "user2", "u@u.com", "password")
<     test.u3 = User.objects.create_user(
<         "user3", "u@u.com", "password")
<     
< def give_test_permissions(test):
<     
<     create_test_users(test)
<     
<     # give permissions
<     give_permission_to("can_add_aggregate", Aggregate, test.u1)
<     give_permission_to("can_create_project", Project, test.u2)
<     
< def create_test_aggregates(test):
< 
<     from expedient.clearinghouse.aggregate.tests.models import DummyAggregate
<     
<     give_test_permissions(test)
<     
<     test.client.login(username=test.u1.username, password="password")
<     threadlocals.push_frame(user=test.u1)
<     
<     test.agg1 = DummyAggregate.objects.create(
<         name="Agg1",
<     )
<     test.agg1.create_resources()
<     
<     test.agg2 = DummyAggregate.objects.create(
<         name="Agg2",
<     )
<     test.agg2.create_resources()
<     
<     # give permissions to use aggregates
<     give_permission_to("can_use_aggregate", test.agg1, test.u2)
<     give_permission_to("can_use_aggregate", test.agg2, test.u2)
<     
<     test.client.logout()
<     threadlocals.pop_frame()
< 
< def create_test_project(test):
<     
<     create_test_aggregates(test)
<     
<     test.client.login(username=test.u2.username, password="password")
<     threadlocals.push_frame(user=test.u2)
< 
<     # create the project
<     Project.objects.all().delete()
<     test_get_and_post_form(
<         client=test.client,
<         url=Project.get_create_url(),
<         params={"name": "project name", "description": "project description"},
<     )
<     test.project = Project.objects.all()[0]
< 
<     test.client.logout()
<     threadlocals.pop_frame()
< 
< def add_test_project_member(test):
<     
<     create_test_project(test)
<     
<     test.client.login(username=test.u2.username, password="password")
<     threadlocals.push_frame(user=test.u2)
< 
<     # add a member
<     researcher = ProjectRole.objects.get(project=test.project, name="researcher")
<     test_get_and_post_form(
<         client=test.client,
<         url=test.project.get_member_add_url(),
<         params={"user": test.u3.id, "roles": researcher.id},
<     )
<     
<     test.assertEqual(test.project.owners.count(), 1)
<     test.assertEqual(test.project.members.count(), 2)
< 
<     test.client.logout()
<     threadlocals.pop_frame()
<     
< def add_test_aggregate_to_project(test):
<     
<     add_test_project_member(test)
<     
<     test.client.login(username=test.u2.username, password="password")
<     threadlocals.push_frame(user=test.u2)
< 
<     # add the aggregate to the project
<     test_get_and_post_form(
<         client=test.client,
<         url=test.project.get_agg_add_url(),
<         params={"id": "%s" % test.agg1.id},
<     )
<     test_get_and_post_form(
<         client=test.client,
<         url=test.project.get_agg_add_url(),
<         params={"id": "%s" % test.agg2.id},
<     )
<     test.assertEqual(test.project.aggregates.count(), 2)
< 
<     test.client.logout()
<     threadlocals.pop_frame()
<             
< def create_test_slice(test):
<     
<     add_test_aggregate_to_project(test)
<     
<     test.client.login(username=test.u2.username, password="password")
<     threadlocals.push_frame(user=test.u2)
< 
<     # create the slice
<     Slice.objects.all().delete()
<     
<     expiration = datetime.now() + timedelta(days=settings.MAX_SLICE_LIFE - 5)
<     
<     test_get_and_post_form(
<         client=test.client,
<         url=Slice.get_create_url(proj_id=test.project.id),
<         params={
<             "name": "slice name",
<             "description": "slice description",
<             "expiration_date_0": "%s" % expiration.date(),
<             "expiration_date_1": expiration.time().strftime("%H:%m:%S"),
<         },
<     )
<     test.slice = Slice.objects.all()[0]
< 
<     test.client.logout()
<     threadlocals.pop_frame()
<     
< def add_test_aggregate_to_slice(test):
<     
<     create_test_slice(test)
<     
<     test.client.login(username=test.u2.username, password="password")
<     threadlocals.push_frame(user=test.u2)
< 
<     # add the aggregate to the slice
<     test_get_and_post_form(
<         client=test.client,
<         url=test.slice.get_agg_add_url(),
<         params={"id": "%s" % test.agg1.id},
<     )
<     test_get_and_post_form(
<         client=test.client,
<         url=test.slice.get_agg_add_url(),
<         params={"id": "%s" % test.agg2.id},
<     )
<     test.assertEqual(test.slice.aggregates.count(), 2)
< 
<     test.client.logout()
<     threadlocals.pop_frame()
<     
< def add_resources_to_test_slice(test):
<     
<     from expedient.clearinghouse.aggregate.tests.models import DummyResource
< 
<     add_test_aggregate_to_slice(test)
<     
<     test.client.login(username=test.u2.username, password="password")
<     threadlocals.push_frame(user=test.u2)
< 
<     # add resources to the slice
<     for agg in [test.agg1, test.agg2]:
<         for rsc in DummyResource.objects.filter(aggregate=agg):
<             Sliver.objects.create(resource=rsc, slice=test.slice)
< 
<     test.client.logout()
<     threadlocals.pop_frame()
<         
< def start_test_slice(test):
<     """Create a test setup with aggregates, users, project, and started slice.
<     
<     Creates two users, test.u1 and test.u2. Gives test.u1 permission to
<     create aggregates. Creates two dummy aggregates with resources using u1.
<     
<     Gives u2 permission to create project, creates project with u2, add u1 as
<     researcher member, creates a slice, add all dummy resources to slice,
<     and starts it.
<     
<     C{test} must be a child of L{expedient.common.tests.manager.SettingsTestCase}.
<     
<     """
<     
<     add_resources_to_test_slice(test)
<     
<     test.client.login(username=test.u2.username, password="password")
<     threadlocals.push_frame(user=test.u2)
< 
<     # start the slice
<     test_get_and_post_form(
<         client=test.client,
<         url=test.slice.get_start_url(),
<         params={},
<     )
<     test.slice = Slice.objects.get(pk=test.slice.pk)
<     test.assertTrue(test.slice.started)
< 
<     test.client.logout()
<     threadlocals.pop_frame()
<     
<     
---
>     
\ No newline at end of file
diff -r ./views.py /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse//views.py
7a8,9
> from expedient.common.permissions.shortcuts import has_permission 
> from django.contrib.auth.models import User
9a12,16
> 
>     isSuperUser = False
>     if(has_permission(request.user, User, "can_manage_users")):
> 		isSuperUser = True
>     
13a21
> 	    "isSuperUser": isSuperUser,
18c26
<     )
\ No newline at end of file
---
>     )
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse/: views.pyc
Only in /home/user/ofelia-git/expedient-old/src/python/expedient/clearinghouse/: xmlrpc-ssl.crt
