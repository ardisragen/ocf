INTRODUCTION:
-------------
This package contains code needed to run the Expedient Clearinghouse and 
OpenFlow Aggregate manager.

Expedient has been tested on openSuSE 11.2 with Apache. The package contains
the following:
- Source files specific to the expedient including python, html, and others
- Configuration files that can be used to run Apache with the Clearinghouse
- Tests for all components

PREREQUISITES:
--------------
Following is a partial list of packages that are needed to run (their
dependencies are not included):
    setuptools
    django
    decorator
    django-autoslug
    m2crypto
    python-imaging (pil)
    django-extensions 
    python-dateutil
    pycrypto
    paramiko
    django-renderform
    webob
    django-registration
    python-xmlsec1
    lxml
    pyquery
    openssl

Folowing are possibly other needed packages:
    libxmlsec1-1 
    libxmlsec1-openssl1
    python-devel 
    
Following is the list of packages to get Apache2 to work with Expedient:
    apache2
    apache2-mod_wsgi
    apache2-mod_macro
    apache2-itk
    
Some more packages might be necessary, and the package names might differ from
the ones listed. This list will be updated to be accurate eventually.

INSTALLATION:
-------------
See INSTALL for more accurate, manual instructions in case of problems with the
below.

The following instructions have only been tested on openSuSE 11.2.

Unpack the expedient-x.y.z.tar.gz
$ tar -czf expedient-x.y.z.tar.gz
$ cd expedient-x.y.z
$ sudo make install

This installs apache and configures it to start serving expedient files.

Update the settings by going through 
/srv/www/src/python/openflow/optin_manager/deployment_settings.py and
/srv/www/src/python/expedient/clearinghouse/deployment_settings.py and editing
the following where applicable:
- The ADMINS setting
- The EMAIL_* settings
- The XMLRPC_* settings and MY_CA according to your installation
- The SITE_NAME and SITE_DOMAIN settings
- The OPENFLOW_GAPI_* settings

As root, do the following (also creating the superuser):
# cd /srv/www/expedient/src/python
# python expedient/clearinghouse/manage.py syncdb
# python expedient/clearinghouse/manage.py flush
# python openflow/optin_manager/manage.py syncdb
# python expedient/optin_manager/manage.py flush

The above steps need to be repeated after running the tests.

Restart Apache.


HOW IT WORKS:
-------------
The following diagram shows the major components:

+---------+     +-----------+      +----+      +----+     +---------+     +-------------+
| network |-----| FlowVisor |------| OM |------| AM |-----| AMProxy |-----| GAPI Client |
+---------+     +-----------+      +----+      +----+     +---------+     +-------------+

The AM Proxy receives GENI API calls, checks credentials and forwards the
requests to the AM (the Expedient Clearinghouse). The AM Proxy is a modified
client from the GENI test harness. The AM distributes the
requests to the connected Opt-in Managers (OM) which control the FlowVisor.


TESTS:
------
The tests will run on the installed environment. They require some setup to get
working. The tests will flush the databases, so make sure to backup any
important data the the Clearinghouse and Opt-In Manager databases.

Get the Mininet VM and upgrade to OpenVSwitch 1.0:
--------------------------------------------------
See the INSTALL file for an easier recipe than the below.

Follow the instructions at
http://www.openflowswitch.org/foswiki/bin/view/OpenFlow/Mininet to download and
run mininet. This provides a VM with a virtual network.

ssh into the mininet VM and install OpenVSwitch 1.0 with the kernel module by
following the instructions at http://openvswitch.org/?page_id=10

Setup a local Flowvisor:
------------------------
Grab the Flowvisor release, then compile and configure it. We will be testing
with this version so don't use a production system. Make sure you delete the
'mySSLKeyStore' file to generate a new certificate. When the tool asks for your
full name, use "192.168.x.1" where x is the subnet of vmnet8 (from the previous
step). 

Edit test settings:
-------------------
edit /srv/www/expedient/src/python/tests/test_settings.py and correct the
following settings:

- The root password for the flowvisor you just configured (replacing
  "rootpassword")
  
- The flowvisor "host" (change it to an IP address the mininet VM can use to
  talk to processes on the host)
  
- FLOWVISOR_DIR (set to the path of the local flowvisor)

- MININET_VMS (replace "192.168.x.y" with the VM's IP address)

Run the tests:
--------------
To run the tests, as root:
# cd /srv/www/expedient/src/python 
# python openflow/tests/tests.py

HOW TO USE OPT-IN MANAGER
----------------------------
Flush the database:
# python openflow/optin_manager/manage.py flush

Django ask to create a superuser. please provide the username/password 
information. The superuser will be assigned the entire flowspace in the system
on first log in to opt-in manager.

Now go to optin manager webpage (https://localhost:8443/), log in using
the superuser username/password, and set up:
1) clearinghouse user. for doing this, use "set clearinghouse" link
   under "Manage Webiste". This is the username and password of clearinghouse
   when it sends xmlrpc calls to optin-manager
2) flowvisor. use "set flowvisor" link under "Manage Website"

At this point, optin manager can can send xmlrpc calls to flowvisor and
receive xmlrpc calls from clearinghouse.

Now you can create users/ opt-in/opt-out,...
a typical workflow:

* Log out of superuser account.
* Create a normal user ("register it" link)
* verify the new account (e-mail verification)
* log in to the opt-in mnagare using the new account.
* request some flowspace for the new user: using the "Register Flowspace" 
  link under "User Profile". enter some ip address and/or Mac address.
  then submit request.
* the request is now sent to the admin who owns the flowsapce to verify
  the request. in this case, the superuser. log in to optin manager website 
  using superuser credentials. 
* go to "approve user requests" under "Manage Requests". you will see a couple
  of outstanding requests waiting for admin approval. approve them.
* Now the user have some flow space to play with. Using the Opt In/Opt Out/
  Set Prioirties, a user can opt flow spaces into experiments or opt out or 
  change priority orders.

USAGE:
------
Flush the databases and create root users:
# cd /srv/www/expedient/src/python 
# python openflow/optin_manager/manage.py flush
# python expedient/clearinghouse/manage.py flush


Log in to the expedient clearinghouse at https://localhost and add
the optin manager using the windows shown. Set the aggregate url to
https://localhost:8443/xmlrpc/xmlrpc/. Use the same username and password
you just created on the optin manager.

The GENI API can be used to create and delete experiments. Currently shutdown
is the same as delete, and renew always returns true since slices never expire.


Not using Apache or not using HTTPS:
------------------------------------
It is possible to use HTTP instead of HTTPS. However, you will need to
manually edit Apache's configuration files to enable HTTP instead of HTTPS.

You can also try running without Apache altogether and start by using django's
built in development server. However, you will need to be careful because it
is single threaded and deadlocks can occur (especially in tests).


AUTHORS:
--------
   Jad Naous <jnaous@stanford.edu>
   Peyman Kazemian <kazemian@stanford.edu>
